// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentMS.Infrastructure.Data;

#nullable disable

namespace TournamentMS.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20250307031457_updateTeamsMembers")]
    partial class updateTeamsMembers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TournamentMS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<int>("LimitParticipant")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "Racing",
                            Code = "0235",
                            LimitParticipant = 20,
                            Name = "Carreras"
                        },
                        new
                        {
                            Id = 2,
                            Alias = "Strategy",
                            Code = "0236",
                            LimitParticipant = 60,
                            Name = "Estrategia"
                        });
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCooperative")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPlayersPerTeam")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Players")
                        .HasColumnType("integer")
                        .HasColumnName("players");

                    b.HasKey("Id");

                    b.ToTable("games", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCooperative = false,
                            MaxPlayersPerTeam = 1,
                            MaxTeams = 10,
                            Name = "Need For Speed",
                            Players = 10
                        },
                        new
                        {
                            Id = 2,
                            IsCooperative = true,
                            MaxPlayersPerTeam = 5,
                            MaxTeams = 2,
                            Name = "League Of Legends",
                            Players = 10
                        });
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Matches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdStream")
                        .HasColumnType("integer");

                    b.Property<int>("IdTeamWinner")
                        .HasColumnType("integer");

                    b.Property<int>("IdTournament")
                        .HasColumnType("integer")
                        .HasColumnName("id_tournament");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TeamWinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTournament");

                    b.HasIndex("TeamWinnerId");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Prizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.ToTable("prizes", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentMembers")
                        .HasColumnType("integer")
                        .HasColumnName("current_members");

                    b.Property<int>("IdTournament")
                        .HasColumnType("integer")
                        .HasColumnName("id_tournament");

                    b.Property<bool>("IsFull")
                        .HasColumnType("boolean")
                        .HasColumnName("is_full");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("integer")
                        .HasColumnName("max_members");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TeamsMatches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMatch")
                        .HasColumnType("integer");

                    b.Property<int>("IdTeam")
                        .HasColumnType("integer");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("teams_matches", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TeamsMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTeam")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTeam");

                    b.ToTable("teams_members", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer")
                        .HasColumnName("id_category");

                    b.Property<int>("IdGame")
                        .HasColumnType("integer")
                        .HasColumnName("id_game");

                    b.Property<int>("IdOrganizer")
                        .HasColumnType("integer")
                        .HasColumnName("id_organizer");

                    b.Property<int?>("IdPrize")
                        .HasColumnType("integer")
                        .HasColumnName("id_prize");

                    b.Property<int?>("IdTeamWinnerTournament")
                        .HasColumnType("integer")
                        .HasColumnName("id_team_winner_tournmanent");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean")
                        .HasColumnName("is_free");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tournament_status");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdGame");

                    b.HasIndex("IdPrize")
                        .IsUnique();

                    b.ToTable("tournaments", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TournamentUserRole", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<int>("IdTournament")
                        .HasColumnType("integer")
                        .HasColumnName("id_tournament");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<int?>("IdMatch")
                        .HasColumnType("integer");

                    b.HasKey("IdUser", "IdTournament", "Role");

                    b.HasIndex("IdTournament");

                    b.ToTable("tournaments_users_roles", (string)null);
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Matches", b =>
                {
                    b.HasOne("TournamentMS.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("IdTournament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentMS.Domain.Entities.Teams", "TeamWinner")
                        .WithMany()
                        .HasForeignKey("TeamWinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamWinner");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TeamsMatches", b =>
                {
                    b.HasOne("TournamentMS.Domain.Entities.Matches", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentMS.Domain.Entities.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TeamsMembers", b =>
                {
                    b.HasOne("TournamentMS.Domain.Entities.Teams", "Team")
                        .WithMany("Members")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TournamentMS.Domain.Entities.Category", "Category")
                        .WithMany("Tournaments")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentMS.Domain.Entities.Game", "Game")
                        .WithMany("Tournaments")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentMS.Domain.Entities.Prizes", "Prize")
                        .WithOne("Tournament")
                        .HasForeignKey("TournamentMS.Domain.Entities.Tournament", "IdPrize");

                    b.Navigation("Category");

                    b.Navigation("Game");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.TournamentUserRole", b =>
                {
                    b.HasOne("TournamentMS.Domain.Entities.Tournament", null)
                        .WithMany("UsersTournamentRole")
                        .HasForeignKey("IdTournament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Category", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Game", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Prizes", b =>
                {
                    b.Navigation("Tournament")
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Teams", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TournamentMS.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("UsersTournamentRole");
                });
#pragma warning restore 612, 618
        }
    }
}
